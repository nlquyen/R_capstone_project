# Task 5 the first and last dates in the Seoul Bike Sharing dataset
date <- "SELECT MAX(DATE) AS LAST_DATE,
            MIN(DATE) AS FIRST_DATE
            FROM SEOUL_BIKE_SHARING;"

sqlQuery(conn,date)

##Task 5
query5 <- "SELECT MAX(CAST(DATE AS DATE)) AS Last_Date, 
MIN(CAST(DATE AS DATE)) AS first_date
FROM SEOUL_BIKE_SHARING;"

sqlQuery(conn,query5)

##Task10
#create table WORLD_CITIES
WORLD_CITIES <- sqlQuery(conn, 
                    "CREATE TABLE WORLD_CITIES (
                                  CITY VARCHAR(20),
                                  CITY_ASCII VARCHAR(20),
                                  LAT INTEGER,
                                  LNG INTEGER,
                                  COUNTRY VARCHAR(20),
                                  ISO2 VARCHAR(20),
                                  ISO3 VARCHAR(20),
                                  ADMIN_NAME VARCHAR(20),
                                  CAPITAL VARCHAR(20),
                                  POPULATION INTEGER,
                                  ID INTEGER)", 
    errors=FALSE
                    )

    if (WORLD_CITIES == -1){
        cat ("An error has occurred.\n")
        msg <- odbcGetErrMsg(conn)
        print (msg)
    } else {
        cat ("Table was created successfully.\n")
    }

##load data
df4 <- read.csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0321EN-SkillsNetwork/labs/datasets/world_cities.csv",colClasses=c(date="character"))
sqlSave(conn,df4, "WORLD_CITIES", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)
WORLD_CITIES_db <- sqlFetch(conn, "WORLD_CITIES")

#task 10
# Solution 10 join across the WORLD_CITIES and the BIKE_SHARING_SYSTEMS
query10 <- "SELECT WORLD_CITIES.CITY_ASCII, 
                BIKE_SHARING_SYSTEMS.COUNTRY,
                WORLD_CITIES.LAT, 
                WORLD_CITIES.LNG, 
                WORLD_CITIES.POPULATION,
                SUM(BIKE_SHARING_SYSTEMS.BICYCLES) AS TOTAL_BICYCLES
            FROM WORLD_CITIES
            INNER JOIN BIKE_SHARING_SYSTEMS ON WORLD_CITIES.CITY_ASCII = BIKE_SHARING_SYSTEMS.CITY
            WHERE WORLD_CITIES.CITY_ASCII = 'Seoul';"

sqlQuery(conn,query10)

##task 11
#Solution 11 join across the WORLD_CITIES and the BIKE_SHARING_SYSTEMS
query11 <- "SELECT W.CITY, W.CITY_ASCII, W.COUNTRY, W.LAT, W.LNG, W.POPULATION 
SUM(B.BICYCLES) AS TOTAL_BIKES
FROM WORLD_CITIES W, BIKE_SHARING_SYSTEMS B
WHERE B.CITY = W.CITY_ASCII
AND TOTAL_BIKES BETWEEN 15000 AND 20000
order by B.BICYCLES desc;"

sqlQuery(conn,query11)
